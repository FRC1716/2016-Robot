// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::controlSSleftFrontM;
std::shared_ptr<SpeedController> RobotMap::controlSSleftRearM;
std::shared_ptr<SpeedController> RobotMap::controlSSrightFrontM;
std::shared_ptr<SpeedController> RobotMap::controlSSrightRearM;
std::shared_ptr<RobotDrive> RobotMap::controlSSRobotDrive;
std::shared_ptr<AnalogInput> RobotMap::controlSSshooterGauge;
std::shared_ptr<AnalogInput> RobotMap::controlSSarmGauge;

std::shared_ptr<SpeedController> RobotMap::driveSubsystemLeftControl;
std::shared_ptr<Encoder> RobotMap::driveSubsystemLeftEncoder;
std::shared_ptr<PIDController> RobotMap::driveSubsystemLeftDrive;
std::shared_ptr<Encoder> RobotMap::driveSubsystemRightEncoder;
std::shared_ptr<SpeedController> RobotMap::driveSubsystemRightControl;
std::shared_ptr<PIDController> RobotMap::driveSubsystemRightDrive;
std::shared_ptr<SpeedController> RobotMap::driveSubsystemRearLeft;
std::shared_ptr<SpeedController> RobotMap::driveSubsystemRearRight;
std::shared_ptr<RobotDrive> RobotMap::driveSubsystemBackDrive;

std::shared_ptr<SpeedController> RobotMap::windowMotor;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    controlSSleftFrontM.reset(new Talon(0));
    lw->AddActuator("ControlSS", "leftFrontM", (Talon&) controlSSleftFrontM);
    
    controlSSleftRearM.reset(new Talon(1));
    lw->AddActuator("ControlSS", "leftRearM", (Talon&) controlSSleftRearM);
    
    controlSSrightFrontM.reset(new Talon(2));
    lw->AddActuator("ControlSS", "rightFrontM", (Talon&) controlSSrightFrontM);
    
    controlSSrightRearM.reset(new Talon(3));
    lw->AddActuator("ControlSS", "rightRearM", (Talon&) controlSSrightRearM);
    
    controlSSRobotDrive.reset(new RobotDrive(controlSSleftFrontM, controlSSleftRearM,
              controlSSrightFrontM, controlSSrightRearM));
    
    controlSSRobotDrive->SetSafetyEnabled(true);
        controlSSRobotDrive->SetExpiration(0.1);
        controlSSRobotDrive->SetSensitivity(0.5);
        controlSSRobotDrive->SetMaxOutput(1.0);

    controlSSshooterGauge.reset(new AnalogInput(0));
    lw->AddSensor("ControlSS", "shooterGauge", controlSSshooterGauge);
    
    controlSSarmGauge.reset(new AnalogInput(1));
    lw->AddSensor("ControlSS", "armGauge", controlSSarmGauge);
    





    driveSubsystemLeftControl.reset(new Talon(0));
        lw->AddActuator("Drive Subsystem", "Left Control", (Talon&) driveSubsystemLeftControl);

        driveSubsystemLeftEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
        lw->AddSensor("Drive Subsystem", "Left Encoder", driveSubsystemLeftEncoder);
        driveSubsystemLeftEncoder->SetDistancePerPulse(1.0);
        driveSubsystemLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);

        driveSubsystemLeftDrive.reset(new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveSubsystemLeftEncoder.get(), driveSubsystemLeftControl.get(), 0.02));
        lw->AddActuator("Drive Subsystem", "Left Drive", driveSubsystemLeftDrive);
        driveSubsystemLeftDrive->SetContinuous(false); driveSubsystemLeftDrive->SetAbsoluteTolerance(0.2);
            driveSubsystemLeftDrive->SetOutputRange(-1.0, 1.0);

        driveSubsystemRightEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
        lw->AddSensor("Drive Subsystem", "Right Encoder", driveSubsystemRightEncoder);
        driveSubsystemRightEncoder->SetDistancePerPulse(1.0);
        driveSubsystemRightEncoder->SetPIDSourceType(PIDSourceType::kDisplacement);

        driveSubsystemRightControl.reset(new Talon(2));
        lw->AddActuator("Drive Subsystem", "Right Control", (Talon&) driveSubsystemRightControl);

        driveSubsystemRightDrive.reset(new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveSubsystemRightEncoder.get(), driveSubsystemRightControl.get(), 0.02));
        lw->AddActuator("Drive Subsystem", "Right Drive", driveSubsystemRightDrive);
        driveSubsystemRightDrive->SetContinuous(false); driveSubsystemRightDrive->SetAbsoluteTolerance(0.2);
            driveSubsystemRightDrive->SetOutputRange(-1.0, 1.0);

        driveSubsystemRearLeft.reset(new Talon(1));
        lw->AddActuator("Drive Subsystem", "Rear Left", (Talon&) driveSubsystemRearLeft);

        driveSubsystemRearRight.reset(new Talon(3));
        lw->AddActuator("Drive Subsystem", "Rear Right", (Talon&) driveSubsystemRearRight);

        driveSubsystemBackDrive.reset(new RobotDrive(driveSubsystemRearLeft, driveSubsystemRearRight));

        driveSubsystemBackDrive->SetSafetyEnabled(true);
            driveSubsystemBackDrive->SetExpiration(0.1);
            driveSubsystemBackDrive->SetSensitivity(0.5);
            driveSubsystemBackDrive->SetMaxOutput(1.0);

        windowMotor.reset(new VictorSP(5));
        lw->AddActuator("ControlSS", "Intake", (VictorSP&) windowMotor);

        controlSSshooterGauge.reset(new AnalogInput(0));
        lw->AddSensor("ControlSS", "shooterGauge", controlSSshooterGauge);

        controlSSarmGauge.reset(new AnalogInput(1));
        lw->AddSensor("ControlSS", "armGauge", controlSSarmGauge);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
