// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveReverse.h"
#include "Math.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveReverse::DriveReverse() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	Requires(Robot::controlSS.get());
	Requires(Robot::driveSubsystem.get());
 }

// Called just before this Command runs the first time
void DriveReverse::Initialize() {




}

// Called repeatedly when this Command is scheduled to run
void DriveReverse::Execute() {

	//drives to defense

		Robot::driveSubsystem->Drive(0.75 * 1.075, 0.75);//1.715

		SmartDashboard::PutNumber("Left encoder", std::abs(Robot::driveSubsystem->leftEncoder->Get()));
		SmartDashboard::PutNumber("Right encoder", std::abs(Robot::driveSubsystem->rightEncoder->Get()));
		SmartDashboard::PutNumber("Left control", Robot::driveSubsystem->leftControl->Get());
		SmartDashboard::PutNumber("Right control", Robot::driveSubsystem->rightControl->Get());
		SmartDashboard::PutNumber("Last multiplier", Robot::driveSubsystem->lastMult);
		SmartDashboard::PutNumber("Multiplier", Robot::driveSubsystem->multiplier);
		//Robot::driveSubsystem->driveStraight(-0.5, -0.5);

	/*
	if (breach == true){//can breach defense

	}else if (breach == false){//can't breach the defense
		//Reset encoders
		Robot::driveSubsystem->leftEncoder->Reset();
		Robot::driveSubsystem->rightEncoder->Reset();

		//drives to defense
		while ((Robot::driveSubsystem->leftEncoder->Get() < (Robot::driveSubsystem->ticksPerRev * distance)) && (Robot::driveSubsystem->rightEncoder->Get() < (Robot::driveSubsystem->ticksPerRev * distance))){
			Robot::driveSubsystem->Drive(0.5, 0.5);
			SmartDashboard::PutNumber("Distance:", distance);
		}
	}*/
}
// Make this return true when this Command no longer needs to run execute()
bool DriveReverse::IsFinished() {
	//if ((std::abs(Robot::driveSubsystem->leftEncoder->Get()) < (Robot::driveSubsystem->ticksPerRev * Robot::controlSS->afterNum * 12.0)) && (std::abs(Robot::driveSubsystem->rightEncoder->Get()) < (Robot::driveSubsystem->ticksPerRev * Robot::controlSS->afterNum * 12.0))){
	if(std::abs(Robot::driveSubsystem->leftEncoder->Get()) < 3150){
		return false;
	}

	Robot::driveSubsystem->leftEncoder->Reset();
	Robot::driveSubsystem->rightEncoder->Reset();
    return true;
}

// Called once after isFinished returns true
void DriveReverse::End() {
	Robot::driveSubsystem->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveReverse::Interrupted() {
	End();
}
