// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"
//#include "DriveToDefense.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	pos = Robot::controlSS->posNum;
	after = Robot::controlSS->afterNum;
	distance = Robot::driveSubsystem->CalculateRotations(85.61);
	breach = Robot::controlSS->canBreach;
	reverse = Robot::controlSS->canReverse;
 }

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	pos = Robot::controlSS->posNum;
	after = Robot::controlSS->afterNum;
	breach = Robot::controlSS->canBreach;
	reverse = Robot::controlSS->canReverse;

	if (breach == true){//can breach defense

	}else if (breach == false){//can't breach the defense
		//Reset encoders
		Robot::driveSubsystem->leftEncoder->Reset();
		Robot::driveSubsystem->rightEncoder->Reset();

		//drives to defense
		while ((Robot::driveSubsystem->leftEncoder->Get() < (Robot::driveSubsystem->ticksPerRev * distance)) && (Robot::driveSubsystem->rightEncoder->Get() < (Robot::driveSubsystem->ticksPerRev * distance))){
			Robot::driveSubsystem->Drive(0.5, 0.5);
			SmartDashboard::PutNumber("Distance:", distance);
		}
	}
	/*if (pos != 0 && def != 0){//smartdashboard doesn't have an error
		if (pos == 1 || def == 1){//both of these indicate low bar and left
			//drive forward through low bar
			//code
			//start counting again after passing outerworks
			//code
			//count to a set value and then turn
			//code
			//shoot
			//code
		}else if (def == 2){//Portcullis
			//run code of traversing defense
			//code
			//after clearing defense turn based on position
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 3){//Cheval de Frise
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 4){//Moat
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 5){//Ramparts
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 6){//Drawbridge
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 7){//Sally Port
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 8){//Rock Wall
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}else if (def == 9){//Rough Terrain
			if (pos == 2){//left-middle

			}else if (pos == 3){//middle

			}else if (pos == 4){//right-middle

			}else if (pos == 5){//right

			}
		}
	}*/
}
// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	Robot::driveSubsystem->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	End();
}
